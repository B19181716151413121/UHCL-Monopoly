##Monopoly.py
##
##B19181716151413121
##
##start
##	create Player object class
##		Has attributes making the player an object 
##		gives the player name, money, properties, and counts for the the types of properties
##
##	create Street Property object class
##		Has attributes making street properties objects
##		gives the object a name, the cost to buy, the cost of rent if the monopoly is owned
##		rent for having 1-4 houses and a hotel, how much the player gets if they mortgage the property
##		how much the player pays if they unmortgage the property, what position the property is located in,
##		if the property is available for purchase, what color the property is, and a status to declare it is a street property
##
##	create Railroad object class
##		Has attributes making Railroads objects
##		gives the objects a name, cost to buy, cost of rent if 1-4 railroads are owned, the positions of the railroads,
##		if the property is available for purchase, and a status to declare it as a Railroad Property
##
##	create Utilities object class
##		Has attributes making Utility objects
##		gives the objects names, cost to buy, cost for rent, cost for rent if they have a monopoly, positions of the utilities,
##		status of availability, and status to declare it as a utility property
##	
##	create Other Properties object class
##		Has attributes making Property objects, gives the objects name, positions, and status to declare it is not a street, railroad, or utility
##	
##	create Community Chest Card object class
##		Has attributes making Community Chest Cards objects, and contains the descriptions of the cards
##	
##	create Chance Card object class
##		Has attribues making Chance Card objects, and contains the descriptions of the cards
##	
##	create class to hold all information and data
##		Has three lists
##		board which contains all properties and all of their attribute information
##		comm which contains all descriptions for all community chest cards
##		chance which contains all descriptions for all chance cards
##
##	create function to add Player objects
##		asks user to input how many players there are and creates them into objects
##		adds players into a list
##	
##	create Main class for all gameplay
##		calls upon Player creating function to initialize players
##		prints out information for player
##		begins while loop which keeps game running
##			asks the players what they want to do, roll, show stats, or show properties
##                            if the player chooses roll
##                            initializes dice1 and dice2 which simulates what the players roll
##                            moves player according to what they got on the roll
##                            if the player moves to a position higher than 39
##                                    the program resets it back to 0 which is go
##                            check if they are on Income Tax
##                                    if yes, the player pays 200
##                            check if player lands on luxury tax
##                                    if yes, the player pays 100
##                            check if player lands on Free Parking
##                                    if yes, the player gets 100
##                            check if player lands on go to jail
##                                    if yes, the player moves to the jail space and 50 is taken from player
##                            check if player lands on chance or community chest
##                                    if yes, the player either gets or pays 0-500
##                            declares the rent of utility 
##                            checks if the space the player lands on is a street property, railroad, or a utility
##                            if yes, and the space is available and the player can afford it
##                                    the player can buy it and add it a their property list
##                                    depending on the kind of property and the color of it, it will add 1 to the player's count
##                            if the property is not available
##                                    the player is charged rent
##                                    the player who owns the property gets payed the rent
##                            if the player cannot afford a property
##                                    print that the player cannot afford it
##                            if the player is broke
##                                    they are removed from the players list
##                                    if there is only one player left in the list
##                                            print the name of the player that wins
##                                            ends the while loop
##                        if the player chooses to show stats
##                            shows the name, money, properties, position
##                        if the player chooses to show properties
##                            prints all properties the player owns
##      
##stop

from random import randint
from time import sleep
class Player(object):  # Player Attributes
    # brown, lblue, pink, orange, red, yellow, green, dblue
    def __init__(self, name, money, properties, position, brc, lbc, pic, orc, rec, yec, grc, dbc, rr, ut):
        self.name = name
        self.money = money
        self.properties = properties
        self.position = position
        self.props = []
        self.brc = brc
        self.lbc = lbc
        self.pic = pic
        self.orc = orc
        self.rec = rec
        self.yec = yec
        self.grc = grc
        self.dbc = dbc
        self.rr = rr
        self.ut = ut
class StreetProperty(object):  # All the main properties that can be built upon
    def __init__(self, name, cost, rent, monrent, house1, house2, house3, house4, hotel, housecost, hotelcost, mortgage,
                 unmortgage, position, avail, color, status):
        self.name = name
        self.cost = cost  # cost to buy property
        self.rent = rent
        self.monrent = monrent  # rent if you own that monopoly
        self.house1 = house1
        self.house2 = house2
        self.house3 = house3
        self.house4 = house4
        self.hotel = hotel
        self.housecost = housecost
        self.hotelcost = hotelcost
        self.mortgage = mortgage  # mortgage that player gets back
        self.unmortgage = unmortgage  # Player has to pay money to unmortgage property
        self.position = position  # Position in a linear sense, Go is 0
        self.avail = avail  # Checks if the property is available
        self.color = color  # Shows what color the property is
        self.status = status  # Status will either say 's', 'u', 'r', or 'o' so the game will check if the property can be bought
class Railroad(object):  # attributes of railroad properties
    def __init__(self, name, cost, rent, rent2, rent3, rent4, position, avail, status):
        self.name = name
        self.cost = cost
        self.rent = rent
        self.rent2 = rent2
        self.rent3 = rent3
        self.rent4 = rent4
        self.position = position
        self.avail = avail
        self.status = status
class Utilities(object):  # Utility Properties
    def __init__(self, name, cost, rent, monrent, position, avail, status):
        self.name = name
        self.cost = cost
        self.rent = rent
        self.monrent = monrent
        self.position = position
        self.avail = avail
        self.status = status
class OtherProp(object):
    def __init__(self, name, position, status):
        self.name = name
        self.position = position
        self.status = status
class commCard(object):
    def __init__(self, description):
        self.description = description
class chanceCard(object):
    def __init__(self, description):
        self.description = description
class info():
    board = []
    comm = []
    chance = []

    board.append(OtherProp("Go (Collect $200) ", 0, 'o'))  # Go
    board.append(StreetProperty("Mediterranean Avenue", 60, 2, 4, 10, 30, 90, 160, 250, 50, 50, 30, 33, 1, 'yes', 'brown','s'))  # Mediterranean Avenue
    board.append(OtherProp("Community Chest", 2, 'o'))  # Community Chest 1
    board.append(StreetProperty("Baltic Avenue", 60, 4, 8, 20, 60, 180, 320, 450, 50, 50, 30, 33, 3, 'yes', 'brown','s'))  # Baltic Avenue
    board.append(OtherProp("Income Tax", 4, 'o'))  # Income Tax
    board.append(Railroad("Reading Railroad", 200, 25, 50, 100, 200, 5, 'yes', 'r'))  # Reading Railroad
    board.append(StreetProperty("Oriental Avenue", 100, 6, 12, 30, 90, 270, 400, 550, 50, 50, 50, 55, 6, 'yes', 'lblue','s'))  # Oriental Avenue
    board.append(OtherProp("Chance", 7, 'o'))  # Chance 1
    board.append(StreetProperty("Vermont Avenue", 100, 6, 12, 30, 90, 270, 400, 550, 50, 50, 50, 55, 8, 'yes', 'lblue','s'))  # Vermont Avenue
    board.append(StreetProperty("Connecticut Avenue", 120, 8, 16, 40, 100, 300, 450, 600, 50, 50, 60, 66, 9, 'yes', 'lblue','s'))  # Connecticut Avenue
    board.append(OtherProp("Just Visiting/ In Jail", 10, 'o'))  # Visiting and Jail
    board.append(StreetProperty("St. Charles Place", 140, 10, 20, 50, 150, 450, 625, 750, 100, 100, 70, 77, 11, 'yes', 'pink','s'))  # St Charles Place
    board.append(Utilities("Electric Company", 150, 4, 10, 12, 'yes', 'u'))  # Electric Company
    board.append(StreetProperty("States Avenue", 140, 10, 20, 50, 150, 450, 625, 750, 100, 100, 70, 77, 13, 'yes', 'pink','s'))  # States Avenue
    board.append(StreetProperty("Virginia Avenue", 160, 12, 24, 60, 180, 500, 700, 900, 100, 100, 80, 88, 14, 'yes', 'pink','s'))  # Virginia Avenue
    board.append(Railroad("Short Line", 200, 25, 50, 100, 200, 15, 'yes', 'r'))  # Short Line
    board.append(StreetProperty("St. James Place", 180, 14, 28, 70, 200, 550, 750, 950, 100, 100, 90, 99, 16, 'yes', 'orange','s'))  # St James Place
    board.append(OtherProp("Community Chest", 17, 'o'))  # Community Chest 2
    board.append(StreetProperty("Tennessee Avenue", 180, 14, 28, 70, 200, 550, 750, 950, 100, 100, 90, 99, 18, 'yes', 'orange','s'))  # Tennessee Avenue
    board.append(StreetProperty("New York Avenue", 200, 16, 32, 80, 220, 600, 800, 1000, 100, 100, 100, 110, 19, 'yes', 'orange','s'))  # New York Avenue
    board.append(OtherProp("Free Parking", 20, 'o'))  # Free Parking
    board.append(StreetProperty("Kentucky Avenue", 220, 18, 36, 90, 250, 700, 875, 1050, 150, 150, 110, 121, 21, 'yes', 'red','s'))  # Kentucky Avenue
    board.append(OtherProp("Chance", 22, 'o'))  # Chance 2
    board.append(StreetProperty("Indiana Avenue", 220, 18, 36, 90, 250, 700, 875, 1050, 150, 150, 110, 121, 23, 'yes', 'red','s'))  # Indiana Avenue
    board.append(StreetProperty("Illinois Avenue", 240, 20, 40, 100, 300, 750, 925, 1100, 150, 150, 120, 132, 24, 'yes', 'red','s'))  # Illinois Avenue
    board.append(Railroad("B & O Railroad", 200, 25, 50, 100, 200, 25, 'yes', 'r'))  # B&O Railroad
    board.append(StreetProperty("Atlantic Avenue", 260, 22, 44, 110, 330, 800, 975, 1150, 150, 150, 130, 143, 26, 'yes','yellow', 's'))  # Atlantic Avenue
    board.append(StreetProperty("Ventnor Avenue", 260, 22, 44, 110, 330, 800, 975, 1150, 150, 150, 130, 143, 27, 'yes', 'yellow','s'))  # Ventnor Avenue
    board.append(Utilities("Water Works", 150, 4, 10, 28, 'yes', 'u'))  # Water Works
    board.append(StreetProperty("Marvin Gardens", 280, 24, 48, 120, 360, 850, 1025, 1200, 150, 150, 140, 154, 29, 'yes','yellow', 's'))  # Marvin Gardens
    board.append(OtherProp("Go To Jail", 30, 'o'))  # Go to Jail
    board.append(StreetProperty("Pacific Avenue", 300, 26, 52, 130, 390, 900, 1100, 1275, 200, 200, 150, 165, 31, 'yes', 'green','s'))  # Pacific Avenue
    board.append(StreetProperty("North Carolina Avenue", 300, 26, 52, 130, 390, 900, 1100, 1275, 200, 200, 150, 165, 32, 'yes','green', 's'))  # North Carolina Avenue
    board.append(OtherProp("Community Chest", 33, 'o'))  # Community Chest 3
    board.append(StreetProperty("Pennslvania Avenue", 320, 28, 56, 150, 450, 1000, 1200, 1400, 200, 200, 160, 176, 34, 'yes','green', 's'))  # Pennsylvania Avenue
    board.append(Railroad("Pennsylvania Railroad", 200, 25, 50, 100, 200, 35, 'yes', 'r'))  # Pennsylvania Railroad
    board.append(OtherProp("Chance", 36, 'o'))  # Chance 3
    board.append(StreetProperty("Park Place", 350, 35, 70, 175, 500, 1100, 1300, 1500, 200, 200, 175, 193, 37, 'yes', 'dblue','s'))  # Park Place
    board.append(OtherProp("Luxury Tax", 38, 'o'))  # Luxury Tax
    board.append(StreetProperty("Boardwalk", 400, 50, 100, 200, 600, 1400, 1700, 2000, 200, 200, 200, 220, 39, 'yes', 'dblue','s'))  # Boardwalk

    chance.append(chanceCard("Advance to Boardwalk"))
    chance.append(chanceCard("Take a Trip to Reading Railroad. If You Pass Go Collect $200"))
    chance.append(chanceCard("Your Building Loan Matures. Collect $200"))
    chance.append(chanceCard("Advance to Illinois Avenue. If You Pass Go, Collect $200"))
    chance.append(chanceCard("Advance to Nearest Railroad. If owned pay twice the rent."))
    chance.append(chanceCard("Advance to Go. Collect $200"))
    chance.append(chanceCard("Advance to St. Charles Place. If You Pass Go, Collect $200"))
    chance.append(chanceCard("Go Back Three Spaces"))
    chance.append(chanceCard("Speeding Fine $15"))
    chance.append(chanceCard("Advance to Nearest Utility. Roll again and pay 10 times the amount"))
    chance.append(chanceCard("Go To Jail. Do Not Collect $200"))
    chance.append(chanceCard("Bank Pays You Divident of $50"))
    chance.append(chanceCard("You Have Been Elected Chairman Of the Board. Pay Each Player $50"))
    chance.append(chanceCard("Make General Repairs. For each house pay $25. For each Hotel pay $100"))
    chance.append(chanceCard("Get out of Jail Free"))

    comm.append(commCard("You Have Won Second Place in a Beauty Contest. Collect $10"))
    comm.append(commCard("Life Insurance Matuers. Collect $100"))
    comm.append(commCard("School Fees. Pay $50"))
    comm.append(commCard("Income Tax Refund. Collect $20"))
    comm.append(commCard("Holiday Fund Matures. Collect $100"))
    comm.append(commCard("Hospital Fees. Pay $100"))
    comm.append(commCard("Get Out of Jail Free"))
    comm.append(commCard("Go To Jail"))
    comm.append(commCard("Recieve $25. Consultancy Fee"))
    comm.append(commCard("Doctor's Fees. Pay $50"))
    comm.append(commCard("It's Your Birthday. Collect $10 from each player"))
    comm.append(commCard("You Are Assessed for Street Repairs. Pay $40 per house and $115 per hotel"))
    comm.append(commCard("You Inherit $100"))
    comm.append(commCard("Advance to Go. Collect $200"))
    comm.append(commCard("From Sale of Stock. You Get $50"))
    comm.append(commCard("Bank Error In Your Favor. Collect $200"))
"""
for i in range(40):
    print (info.board[i].name , "is in position", info.board[i].position)
    if (info.board[i].name == "North Carolina Avenue"):
        print("This property costs $", info.board[i].house1)
        print("Hotels cost $", info.board[i].hotelcost)
        break

print()
for i in range(15):
    print(info.chance[i].description)
print()
for i in range(16):
    print(info.comm[i].description)

print()
"""
def start(playerList):
    numPlayers = int(input("How many players: "))
    while numPlayers > 0:
        player = Player(input("Enter a name: "), 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
        playerList.append(player)
        numPlayers -= 1
    return
class Main():
    print("\n\nMONOPOLY\n\n")
    plist = []
    start(plist)
    turn = 0
    print("\nName: ", plist[turn].name)
    print("Starting Money: $", plist[turn].money)
    print("Starting Properties: ", plist[turn].properties)
    print("Starting Position: ", plist[turn].position)
    print()

    gameCont = 1
    turnCount = 0
    while (gameCont > 0):
        print("__________________________")
        print("\n\n", plist[turn].name + "'s turn\n")
        #move = input("\nWhat do you want to do? ")#roll, stats, props
        move = 'roll'

        if (move == "roll" or move == 'r'):
            dice1 = randint(1, 6)
            dice2 = randint(1, 6)
            print()

            print("Dice 1:", dice1, "\nDice 2:", dice2)
            print("Name: ", plist[turn].name)
            print("Money: ", plist[turn].money)
            plist[turn].position += dice1 + dice2

            """if (dice1 == dice2):#1st instance of doubles
                print ("\nDoubles! ")
                print ("Dice 1:", dice1, "\nDice 2:", dice2)
                plist[turn].position += dice1 + dice2
                buyStuff()

                if (dice1 == dice2):#2nd instance of doubles
                    print("\nDoubles! Again...")
                    print ("Dice 1:", dice1, "\nDice 2:", dice2)
                    plist[turn].position += dice1 + dice2
                    buyStuff()

                    if (dice1 == dice2): #3rd instance of doubles
                        print("\nYou were speeding. Go To Jail")
                        dice1 = 0
                        dice2 = 0
                        plist[turn].position = 10 #moves player to jail
                        plist[turn].money -= 100 #removes $100 from player"""

            if (plist[turn].position > 39):  # Resets player to beginning of board list
                plist[turn].position -= 39
                plist[turn].money += 100

            if (plist[turn].position == info.board[
                4].position):  # Deducts $200 if landed on Income Tax, this works sometimes
                plist[turn].money -= 200
                print("\nYou landed on Income Tax, Pay $200")

            if (plist[turn].position == info.board[38].position):  # Deducts $100 if landed on Luxury Tax
                plist[turn].money = plist[turn].money - 100
                print("\nYou landed on Luxury Tax, Pay $100")

            if (plist[turn].position == info.board[20].position):  # Adds $100 if landed on Free Parking
                plist[turn].money += 100

            if (plist[turn].position == info.board[30].position):  # Go To Jail and substracts $50 for bail fee
                dice1 = 0
                dice2 = 0
                plist[turn].position = 10
                plist[turn].money -= 50
            if (info.board[plist[turn].position].name == 'Chance'):
                chance1 = randint(0,1)
                chance2 = randint(0, 500)
                ops = ['+', '-']
                if ops[chance1] == '+':
                    plist[turn].money += chance2
                    print ("added $", chance2)
                else:
                    plist[turn].money -= chance2
                    print("substracted $", chance2)
            if (info.board[plist[turn].position].name == 'Community Chest'):
                chance1 = randint(0,1)
                chance2 = randint(0, 500)
                ops = ['+', '-']
                if ops[chance1] == '+':
                    plist[turn].money += chance2
                    print ("added $", chance2)
                else:
                    plist[turn].money -= chance2
                    print("substracted $", chance2)

            print("Position is: ", info.board[plist[turn].position].name, "#", plist[turn].position, "\n")

            info.board[12].rent = (dice1 * 4) + (dice2 * 4)
            info.board[12].monrent = (dice1 * 10) + (dice2 * 10)
            info.board[28].rent = (dice1 * 4) + (dice2 * 4)
            info.board[28].rent = (dice1 * 10) + (dice2 * 10)



            if (info.board[plist[turn].position].status == 's' or info.board[plist[turn].position].status == 'r' or
                        info.board[plist[turn].position].status == 'u'):
                # print ('This can be bought\n')
                if (info.board[plist[turn].position].avail == 'yes' and plist[turn].money > info.board[
                    plist[turn].position].cost):
                    print(info.board[plist[turn].position].name, "is not owned by anyone")
                    print(info.board[plist[turn].position].name, "costs $", info.board[plist[turn].position].cost)
                    #buy = input("\nWould you like to purchase it? ")
                    buy = 'yes'
                    if (buy == 'y' or buy == 'yes'):
                        plist[turn].money -= info.board[plist[turn].position].cost
                        plist[turn].props.append(info.board[plist[turn].position].name)
                        plist[turn].properties += 1
                        info.board[plist[turn].position].avail = 'no'

                        # brc, lbc, pic, orc, rec, yec, grc, dbc
                        if (info.board[plist[turn].position].status == 's'):
                            if (info.board[plist[turn].position].color == 'brown'):
                                plist[turn].brc += 1
                            if (info.board[plist[turn].position].color == 'lblue'):
                                plist[turn].lbc += 1
                            if (info.board[plist[turn].position].color == 'pink'):
                                plist[turn].pic += 1
                            if (info.board[plist[turn].position].color == 'orange'):
                                plist[turn].orc += 1
                            if (info.board[plist[turn].position].color == 'red'):
                                plist[turn].rec += 1
                            if (info.board[plist[turn].position].color == 'yellow'):
                                plist[turn].yec += 1
                            if (info.board[plist[turn].position].color == 'green'):
                                plist[turn].grc += 1
                            if (info.board[plist[turn].position].color == 'dblue'):
                                plist[turn].dbc += 1
                        if (info.board[plist[turn].position].status == 'r'):
                            plist[turn].rr += 1
                        if (info.board[plist[turn].position].status == 'u'):
                            plist[turn].ut += 1



                elif (info.board[plist[turn].position].avail == 'no'):  # Attempt to take rent from player and give it to others

                    # brc, lbc, pic, orc, rec, yec, grc, dbc
                    if (plist[turn].brc == 2 and info.board[plist[turn].position].status == 's'):
                        rent = info.board[plist[turn].position].monrent

                    if (plist[turn].lbc == 3 and info.board[plist[turn].position].status == 's'):
                        rent = info.board[plist[turn].position].monrent

                    if (plist[turn].pic == 3 and info.board[plist[turn].position].status == 's'):
                        rent = info.board[plist[turn].position].monrent

                    if (plist[turn].orc == 3 and info.board[plist[turn].position].status == 's'):
                        rent = info.board[plist[turn].position].monrent

                    if (plist[turn].rec == 3 and info.board[plist[turn].position].status == 's'):
                        rent = info.board[plist[turn].position].monrent

                    if (plist[turn].yec == 3 and info.board[plist[turn].position].status == 's'):
                        rent = info.board[plist[turn].position].monrent

                    if (plist[turn].grc == 3 and info.board[plist[turn].position].status == 's'):
                        rent = info.board[plist[turn].position].monrent

                    if (plist[turn].dbc == 2 and info.board[plist[turn].position].status == 's'):
                        rent = info.board[plist[turn].position].monrent

                    if (plist[turn].ut == 2 and info.board[plist[turn].position].status == 'u'):
                        rent = (dice1 * 10) + (dice2 * 10)

                    if (plist[turn].rr == 2 and info.board[plist[turn].position].status == 'r'):
                        rent = info.board[plist[turn].position].rent2

                    if (plist[turn].rr == 3 and info.board[plist[turn].position].status == 'r'):
                        rent = info.board[plist[turn].position].rent3

                    if (plist[turn].rr == 4 and info.board[plist[turn].position].status == 'r'):
                        rent = info.board[plist[turn].position].rent4
                    else:
                        pass

                    print("This property is already owned")
                    print("Rent costs $", info.board[plist[turn].position].rent)
                    plist[turn].money -= info.board[plist[turn].position].rent
                    print("You now have $", plist[turn].money, "left")

                    for i in range(len(plist)):
                        if (info.board[plist[turn].position].name in plist[i].props):
                            print(plist[i].name, "$", plist[i].money)
                            plist[i].money += info.board[plist[turn].position].rent
                            print(plist[i].name, "$", plist[i].money)


                elif (plist[turn].money < info.board[plist[turn].position].cost):
                    print("You cannot afford this property")

            if (plist[turn].money < 0):
                print("You are broke")
                plist.remove(plist[turn])
                if (len(plist) == 1):
                    print (plist[turn].name, "wins!!!!!!")
                    break

            turn += 1
            sleep(1)


        elif (move == "stats" or move == 's'):  # Shows player's stats
            print("Name: ", plist[turn].name)
            print("Money: ", plist[turn].money)
            print("Properties: ", plist[turn].properties)
            print("Current Position: ", info.board[plist[turn].position].name, "#", plist[turn].position)
            print("\nBrown Count: ", plist[turn].brc)
            print("Light Blue Count: ", plist[turn].lbc)
            print("Pink Count: ", plist[turn].pic)
            print("Orange Count: ", plist[turn].orc)
            print("Red Count: ", plist[turn].rec)
            print("Yellow Count: ", plist[turn].yec)
            print("Green Count: ", plist[turn].grc)
            print("Dark Blue Count: ", plist[turn].dbc)
            print("Railroad Count: ", plist[turn].rr)
            print("Utility Count: ", plist[turn].ut)

        elif (move == 'props' or move == 'p'):
            print(plist[turn].props)

        else:
            print("Invalid Command. \nEnter 'roll' or 'stats' or 'props' ")

        if (turn >= len(plist)):
            turn = 0
            turnCount +=1
